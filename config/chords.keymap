#define COMBO(name, keypress, keypos) \
combo_##name {                        \
  timeout-ms = <60>;                  \
  bindings = <keypress>;              \
  key-positions = <keypos>;           \
};

#define LAYER_CHORD(name, keypress, keypos, lays) \
chord_##name {                                    \
  timeout-ms = <60>;                              \
  bindings = <keypress>;                          \
  key-positions = <keypos>;                       \
  layers = <lays>;                                \
};

#define CHORD(name, keypress, keypos) \
  LAYER_CHORD(name, keypress, keypos, 0)

#define MACRO(name, keys)             \
name: name##_macro {                  \
  label = #name;                      \
  compatible = "zmk,behavior-macro";  \
  #binding-cells = <0>;               \
  tap-ms = <1>;                       \
  wait-ms = <1>;                      \
  bindings = <keys>;                  \
};

#define CHMAC(name, keys)             \
name: name##_macro {                  \
  label = #name;                      \
  compatible = "zmk,behavior-macro";  \
  #binding-cells = <0>;               \
  tap-ms = <1>;                       \
  wait-ms = <1>;                      \
  bindings = <keys>, <&to 0>;  \
};

/ {
	combos {
		compatible = "zmk,combos";
		CHORD(ch_ing, &ch_ing, 43 41 19)
		CHORD(ch_napost, &ch_napost, 41 45 32)
		CHORD(ch_aposre, &ch_aposre, 45 30 42)
		CHORD(ch_the, &ch_the, 32 40 42)
		CHORD(ch_be, &ch_be, 51 42 71)
		CHORD(ch_of, &ch_of, 44 17 71)
		CHORD(ch_and, &ch_and, 29 41 33)
		CHORD(ch_a, &ch_a, 29 71)
		CHORD(ch_to, &ch_to, 32 44 71)
		CHORD(ch_in, &ch_in, 43 41 71)
		CHORD(ch_in, &ch_in, 40 42 71)
		CHORD(ch_have, &ch_have, 40 29 50)
		CHORD(ch_it, &ch_it, 43 32 71)
		CHORD(ch_that, &ch_that, 32 40 29)
		CHORD(ch_for, &ch_for, 17 44 30)
		CHORD(ch_they, &ch_they, 32 40 25)
		CHORD(ch_I, &ch_I, 43 71)
		CHORD(ch_with, &ch_with, 16 43 40)
		CHORD(ch_as, &ch_as, 29 31 71)
		CHORD(ch_not, &ch_not, 41 44 32)
		CHORD(ch_on, &ch_on, 44 41 71)
		CHORD(ch_she, &ch_she, 31 40 42)
		CHORD(ch_at, &ch_at, 29 32 71)
		CHORD(ch_by, &ch_by, 51 25 71)
		CHORD(ch_this, &ch_this, 32 40 31)
		CHORD(ch_we, &ch_we, 16 42 71)
		CHORD(ch_you, &ch_you, 25 44 24)
		CHORD(ch_do, &ch_do, 33 44 71)
		CHORD(ch_but, &ch_but, 51 24 32)
		CHORD(ch_from, &ch_from, 30 44 61)
		CHORD(ch_or, &ch_or, 44 30 71)
		CHORD(ch_which, &ch_which, 40 43 49)
		CHORD(ch_one, &ch_one, 44 41 42)
		CHORD(ch_would, &ch_would, 16 44 24)
		CHORD(ch_all, &ch_all, 29 23 71)
		CHORD(ch_will, &ch_will, 16 43 23)
		CHORD(ch_there, &ch_there, 32 40 30)
		CHORD(ch_say, &ch_say, 31 29 25)
		CHORD(ch_who, &ch_who, 16 40 44)
		CHORD(ch_make, &ch_make, 61 29 60)
		CHORD(ch_can, &ch_can, 49 29 41)
		CHORD(ch_more, &ch_more, 61 30 42)
		CHORD(ch_if, &ch_if, 43 17 71)
		CHORD(ch_no, &ch_no, 41 42 71)
		CHORD(ch_man, &ch_man, 61 29 41)
		CHORD(ch_out, &ch_out, 44 24 32)
		CHORD(ch_other, &ch_other, 44 32 30)
		CHORD(ch_so, &ch_so, 31 44 71)
		CHORD(ch_what, &ch_what, 16 40 32)
		CHORD(ch_time, &ch_time, 32 61 42)
		CHORD(ch_up, &ch_up, 24 18 71)
		CHORD(ch_go, &ch_go, 19 44 71)
		CHORD(ch_about, &ch_about, 51 44 24)
		CHORD(ch_than, &ch_than, 32 29 41)
		CHORD(ch_into, &ch_into, 43 41 44)
		CHORD(ch_could, &ch_could, 49 44 24)
		CHORD(ch_state, &ch_state, 31 32 29)
		CHORD(ch_only, &ch_only, 44 23 25)
		CHORD(ch_new, &ch_new, 41 42 16)
		CHORD(ch_year, &ch_year, 25 42 29)
		CHORD(ch_some, &ch_some, 31 44 61)
		CHORD(ch_take, &ch_take, 32 29 60)
		CHORD(ch_come, &ch_come, 49 44 61)
		CHORD(ch_these, &ch_these, 32 40 31)
		CHORD(ch_know, &ch_know, 60 41 16)
		CHORD(ch_see, &ch_see, 31 42 71)
		CHORD(ch_use, &ch_use, 24 31 42)
	};
};

/ {
	macros {
		CHMAC(ch_ing, &kp I &kp N &kp G &kp SPC)
		CHMAC(ch_napost, &kp N &kp SQT &kp T &kp SPC)
		CHMAC(ch_aposre, &kp SQT &kp R &kp E &kp SPC)
		CHMAC(ch_the, &kp T &kp H &kp E &kp SPC)
		CHMAC(ch_be, &kp B &kp E &kp SPC)
		CHMAC(ch_of, &kp O &kp F &kp SPC)
		CHMAC(ch_and, &kp A &kp N &kp D &kp SPC)
		CHMAC(ch_a, &kp A &kp SPC)
		CHMAC(ch_to, &kp T &kp O &kp SPC)
		CHMAC(ch_in, &kp I &kp N &kp SPC)
		CHMAC(ch_in, &kp I &kp N &kp SPC)
		CHMAC(ch_have, &kp H &kp A &kp V &kp E &kp SPC)
		CHMAC(ch_it, &kp I &kp T &kp SPC)
		CHMAC(ch_that, &kp T &kp H &kp A &kp T &kp SPC)
		CHMAC(ch_for, &kp F &kp O &kp R &kp SPC)
		CHMAC(ch_they, &kp T &kp H &kp E &kp Y &kp SPC)
		CHMAC(ch_I, &kp I &kp SPC)
		CHMAC(ch_with, &kp W &kp I &kp T &kp H &kp SPC)
		CHMAC(ch_as, &kp A &kp S &kp SPC)
		CHMAC(ch_not, &kp N &kp O &kp T &kp SPC)
		CHMAC(ch_on, &kp O &kp N &kp SPC)
		CHMAC(ch_she, &kp S &kp H &kp E &kp SPC)
		CHMAC(ch_at, &kp A &kp T &kp SPC)
		CHMAC(ch_by, &kp B &kp Y &kp SPC)
		CHMAC(ch_this, &kp T &kp H &kp I &kp S &kp SPC)
		CHMAC(ch_we, &kp W &kp E &kp SPC)
		CHMAC(ch_you, &kp Y &kp O &kp U &kp SPC)
		CHMAC(ch_do, &kp D &kp O &kp SPC)
		CHMAC(ch_but, &kp B &kp U &kp T &kp SPC)
		CHMAC(ch_from, &kp F &kp R &kp O &kp M &kp SPC)
		CHMAC(ch_or, &kp O &kp R &kp SPC)
		CHMAC(ch_which, &kp W &kp H &kp I &kp C &kp H &kp SPC)
		CHMAC(ch_one, &kp O &kp N &kp E &kp SPC)
		CHMAC(ch_would, &kp W &kp O &kp U &kp L &kp D &kp SPC)
		CHMAC(ch_all, &kp A &kp L &kp L &kp SPC)
		CHMAC(ch_will, &kp W &kp I &kp L &kp L &kp SPC)
		CHMAC(ch_there, &kp T &kp H &kp E &kp R &kp E &kp SPC)
		CHMAC(ch_say, &kp S &kp A &kp Y &kp SPC)
		CHMAC(ch_who, &kp W &kp H &kp O &kp SPC)
		CHMAC(ch_make, &kp M &kp A &kp K &kp E &kp SPC)
		CHMAC(ch_can, &kp C &kp A &kp N &kp SPC)
		CHMAC(ch_more, &kp M &kp O &kp R &kp E &kp SPC)
		CHMAC(ch_if, &kp I &kp F &kp SPC)
		CHMAC(ch_no, &kp N &kp O &kp SPC)
		CHMAC(ch_man, &kp M &kp A &kp N &kp SPC)
		CHMAC(ch_out, &kp O &kp U &kp T &kp SPC)
		CHMAC(ch_other, &kp O &kp T &kp H &kp E &kp R &kp SPC)
		CHMAC(ch_so, &kp S &kp O &kp SPC)
		CHMAC(ch_what, &kp W &kp H &kp A &kp T &kp SPC)
		CHMAC(ch_time, &kp T &kp I &kp M &kp E &kp SPC)
		CHMAC(ch_up, &kp U &kp P &kp SPC)
		CHMAC(ch_go, &kp G &kp O &kp SPC)
		CHMAC(ch_about, &kp A &kp B &kp O &kp U &kp T &kp SPC)
		CHMAC(ch_than, &kp T &kp H &kp A &kp N &kp SPC)
		CHMAC(ch_into, &kp I &kp N &kp T &kp O &kp SPC)
		CHMAC(ch_could, &kp C &kp O &kp U &kp L &kp D &kp SPC)
		CHMAC(ch_state, &kp S &kp T &kp A &kp T &kp E &kp SPC)
		CHMAC(ch_only, &kp O &kp N &kp L &kp Y &kp SPC)
		CHMAC(ch_new, &kp N &kp E &kp W &kp SPC)
		CHMAC(ch_year, &kp Y &kp E &kp A &kp R &kp SPC)
		CHMAC(ch_some, &kp S &kp O &kp M &kp E &kp SPC)
		CHMAC(ch_take, &kp T &kp A &kp K &kp E &kp SPC)
		CHMAC(ch_come, &kp C &kp O &kp M &kp E &kp SPC)
		CHMAC(ch_these, &kp T &kp H &kp E &kp S &kp E &kp SPC)
		CHMAC(ch_know, &kp K &kp N &kp O &kp W &kp SPC)
		CHMAC(ch_see, &kp S &kp E &kp E &kp SPC)
		CHMAC(ch_use, &kp U &kp S &kp E &kp SPC)
	};
};


#define COMBO(name, keypress, keypos) \
combo_##name {                        \
  timeout-ms = <60>;                  \
  bindings = <keypress>;              \
  key-positions = <keypos>;           \
};

#define LAYER_CHORD(name, keypress, keypos, lays) \
chord_##name {                                    \
  timeout-ms = <60>;                              \
  bindings = <keypress>;                          \
  key-positions = <keypos>;                       \
  layers = <lays>;                                \
};

#define CHORD(name, keypress, keypos) \
  LAYER_CHORD(name, keypress, keypos, 0)

#define MACRO(name, keys)             \
name: name##_macro {                  \
  label = #name;                      \
  compatible = "zmk,behavior-macro";  \
  #binding-cells = <0>;               \
  tap-ms = <1>;                       \
  wait-ms = <1>;                      \
  bindings = <keys>;                  \
};

#define CHMAC(name, keys)             \
name: name##_macro {                  \
  label = #name;                      \
  compatible = "zmk,behavior-macro";  \
  #binding-cells = <0>;               \
  tap-ms = <1>;                       \
  wait-ms = <1>;                      \
  bindings = <keys>, <&to 0>;  \
};

/ {
	combos {
		compatible = "zmk,combos";
		CHORD(ch_are, &ch_are, 29 30 42)
		CHORD(ch_avenue, &ch_avenue, 29 50 42)
		CHORD(ch_could, &ch_could, 49 23 33)
		CHORD(ch_did, &ch_did, 33 43 33)
		CHORD(ch_find, &ch_find, 17 41 33)
		CHORD(ch_good, &ch_good, 19 44 33)
		CHORD(ch_got, &ch_got, 19 44 32)
		CHORD(ch_had, &ch_had, 40 29 33)
		CHORD(ch_have, &ch_have, 40 29 50)
		CHORD(ch_need, &ch_need, 41 42 33)
		CHORD(ch_not, &ch_not, 41 44 32)
		CHORD(ch_public, &ch_public, 18 24 51)
		CHORD(ch_ran, &ch_ran, 30 29 41)
		CHORD(ch_run, &ch_run, 30 24 41)
		CHORD(ch_say, &ch_say, 31 29 25)
		CHORD(ch_some, &ch_some, 31 44 61)
		CHORD(ch_string, &ch_string, 31 32 30)
		CHORD(ch_that, &ch_that, 32 40 29)
		CHORD(ch_the, &ch_the, 32 40 42)
		CHORD(ch_though, &ch_though, 32 40 44)
		CHORD(ch_threw, &ch_threw, 32 40 16)
		CHORD(ch_thank, &ch_thank, 32 41 60)
		CHORD(ch_when, &ch_when, 16 40 42)
		CHORD(ch_what, &ch_what, 16 40 32)
		CHORD(ch_why, &ch_why, 16 40 25)
		CHORD(ch_would, &ch_would, 16 23 33)
	};
};

/ {
	macros {
		CHMAC(ch_are, &kp A &kp R &kp E &kp SPC)
		CHMAC(ch_avenue, &kp A &kp V &kp E &kp N &kp U &kp E &kp SPC)
		CHMAC(ch_could, &kp C &kp O &kp U &kp L &kp D &kp SPC)
		CHMAC(ch_did, &kp D &kp I &kp D &kp SPC)
		CHMAC(ch_find, &kp F &kp I &kp N &kp D &kp SPC)
		CHMAC(ch_good, &kp G &kp O &kp O &kp D &kp SPC)
		CHMAC(ch_got, &kp G &kp O &kp T &kp SPC)
		CHMAC(ch_had, &kp H &kp A &kp D &kp SPC)
		CHMAC(ch_have, &kp H &kp A &kp V &kp E &kp SPC)
		CHMAC(ch_need, &kp N &kp E &kp E &kp D &kp SPC)
		CHMAC(ch_not, &kp N &kp O &kp T &kp SPC)
		CHMAC(ch_public, &kp P &kp U &kp B &kp L &kp I &kp C &kp SPC)
		CHMAC(ch_ran, &kp R &kp A &kp N &kp SPC)
		CHMAC(ch_run, &kp R &kp U &kp N &kp SPC)
		CHMAC(ch_say, &kp S &kp A &kp Y &kp SPC)
		CHMAC(ch_some, &kp S &kp O &kp M &kp E &kp SPC)
		CHMAC(ch_string, &kp S &kp T &kp R &kp I &kp N &kp G &kp SPC)
		CHMAC(ch_that, &kp T &kp H &kp A &kp T &kp SPC)
		CHMAC(ch_the, &kp T &kp H &kp E &kp SPC)
		CHMAC(ch_though, &kp T &kp H &kp O &kp U &kp G &kp H &kp SPC)
		CHMAC(ch_threw, &kp T &kp H &kp R &kp E &kp W &kp SPC)
		CHMAC(ch_thank, &kp T &kp H &kp A &kp N &kp K &kp SPC)
		CHMAC(ch_when, &kp W &kp H &kp E &kp N &kp SPC)
		CHMAC(ch_what, &kp W &kp H &kp A &kp T &kp SPC)
		CHMAC(ch_why, &kp W &kp H &kp Y &kp SPC)
		CHMAC(ch_would, &kp W &kp O &kp U &kp L &kp D &kp SPC)
	};
};


#define COMBO(name, keypress, keypos) \
combo_##name {                        \
  timeout-ms = <60>;                  \
  bindings = <keypress>;              \
  key-positions = <keypos>;           \
};

#define LAYER_CHORD(name, keypress, keypos, lays) \
chord_##name {                                    \
  timeout-ms = <60>;                              \
  bindings = <keypress>;                          \
  key-positions = <keypos>;                       \
  layers = <lays>;                                \
};

#define CHORD(name, keypress, keypos) \
  LAYER_CHORD(name, keypress, keypos, 0)

#define MACRO(name, keys)             \
name: name##_macro {                  \
  label = #name;                      \
  compatible = "zmk,behavior-macro";  \
  #binding-cells = <0>;               \
  tap-ms = <1>;                       \
  wait-ms = <1>;                      \
  bindings = <keys>;                  \
};

#define CHMAC(name, keys)             \
name: name##_macro {                  \
  label = #name;                      \
  compatible = "zmk,behavior-macro";  \
  #binding-cells = <0>;               \
  tap-ms = <1>;                       \
  wait-ms = <1>;                      \
  bindings = <keys>, <&to 0>;  \
};

/ {
	combos {
		compatible = "zmk,combos";
		CHORD(ch_about, &ch_about, 29 51)
		CHORD(ch_all, &ch_all, 29 23)
		CHORD(ch_am, &ch_am, 29 61)
		CHORD(ch_an, &ch_an, 29 41)
		CHORD(ch_another, &ch_another, 29 41 44 32)
		CHORD(ch_are, &ch_are, 29 30)
		CHORD(ch_at, &ch_at, 29 32)
		CHORD(ch_because, &ch_because, 51 49)
		CHORD(ch_become, &ch_become, 51 49 61)
		CHORD(ch_be, &ch_be, 51 42)
		CHORD(ch_before, &ch_before, 51 17)
		CHORD(ch_back, &ch_back, 51 60)
		CHORD(ch_between, &ch_between, 51 32)
		CHORD(ch_but, &ch_but, 51 24)
		CHORD(ch_could, &ch_could, 49 33)
		CHORD(ch_click, &ch_click, 49 23)
		CHORD(ch_come, &ch_come, 49 61)
		CHORD(ch_can, &ch_can, 49 41)
		CHORD(ch_did, &ch_did, 33 43)
		CHORD(ch_do, &ch_do, 33 44)
		CHORD(ch_date, &ch_date, 33 32)
		CHORD(ch_during, &ch_during, 33 24 30)
		CHORD(ch_down, &ch_down, 33 16 41)
		CHORD(ch_day, &ch_day, 33 25)
		CHORD(ch_each, &ch_each, 42 29)
		CHORD(ch_even, &ch_even, 42 50 41)
		CHORD(ch_found, &ch_found, 17 33)
		CHORD(ch_from, &ch_from, 17 42)
		CHORD(ch_free, &ch_free, 17 40)
		CHORD(ch_find, &ch_find, 17 43 41)
		CHORD(ch_feel, &ch_feel, 17 23)
		CHORD(ch_follow, &ch_follow, 17 44 23)
		CHORD(ch_for, &ch_for, 17 30)
		CHORD(ch_first, &ch_first, 17 31)
		CHORD(ch_good, &ch_good, 19 33)
		CHORD(ch_give, &ch_give, 19 43)
		CHORD(ch_get, &ch_get, 19 32)
		CHORD(ch_had, &ch_had, 40 33)
		CHORD(ch_he, &ch_he, 40 42)
		CHORD(ch_his, &ch_his, 40 43)
		CHORD(ch_help, &ch_help, 40 23)
		CHORD(ch_here, &ch_here, 40 30)
		CHORD(ch_how, &ch_how, 40 24)
		CHORD(ch_however, &ch_however, 40 24 50)
		CHORD(ch_if, &ch_if, 43 17)
		CHORD(ch_in, &ch_in, 43 41)
		CHORD(ch_is, &ch_is, 43 31)
		CHORD(ch_its, &ch_its, 43 47)
		CHORD(ch_just, &ch_just, 22 24)
		CHORD(ch_left, &ch_left, 23 42 17)
		CHORD(ch_little, &ch_little, 23 43 32)
		CHORD(ch_like, &ch_like, 23 60)
		CHORD(ch_also, &ch_also, 23 31)
		CHORD(ch_only, &ch_only, 23 25)
		CHORD(ch_may, &ch_may, 61 29)
		CHORD(ch_me, &ch_me, 61 42)
		CHORD(ch_make, &ch_make, 61 60)
		CHORD(ch_more, &ch_more, 61 30)
		CHORD(ch_most, &ch_most, 61 31 32)
		CHORD(ch_move, &ch_move, 61 50)
		CHORD(ch_my, &ch_my, 61 25)
		CHORD(ch_and, &ch_and, 41 33)
		CHORD(ch_need, &ch_need, 41 42 33)
		CHORD(ch_no, &ch_no, 41 60)
		CHORD(ch_number, &ch_number, 41 61)
		CHORD(ch_now, &ch_now, 41 15)
		CHORD(ch_news, &ch_news, 41 31)
		CHORD(ch_not, &ch_not, 41 32)
		CHORD(ch_new, &ch_new, 41 24)
		CHORD(ch_any, &ch_any, 41 25)
		CHORD(ch_of, &ch_of, 44 17)
		CHORD(ch_other, &ch_other, 44 40)
		CHORD(ch_on, &ch_on, 44 41)
		CHORD(ch_or, &ch_or, 44 30)
		CHORD(ch_our, &ch_our, 44 24)
		CHORD(ch_over, &ch_over, 44 50)
		CHORD(ch_part, &ch_part, 18 29 30)
		CHORD(ch_person, &ch_person, 18 42)
		CHORD(ch_page, &ch_page, 18 19)
		CHORD(ch_people, &ch_people, 18 23)
		CHORD(ch_public, &ch_public, 18 24)
		CHORD(ch_ready, &ch_ready, 30 33 25)
		CHORD(ch_right, &ch_right, 30 43 19)
		CHORD(ch_same, &ch_same, 31 29 61)
		CHORD(ch_see, &ch_see, 31 42)
		CHORD(ch_seem, &ch_seem, 31 42 61)
		CHORD(ch_she, &ch_she, 31 40 42)
		CHORD(ch_search, &ch_search, 31 30)
		CHORD(ch_state, &ch_state, 31 32)
		CHORD(ch_sure, &ch_sure, 31 24 30)
		CHORD(ch_service, &ch_service, 31 50)
		CHORD(ch_site, &ch_site, 31 25)
		CHORD(ch_the, &ch_the, 32 40)
		CHORD(ch_there, &ch_there, 32 40 30)
		CHORD(ch_take, &ch_take, 32 60)
		CHORD(ch_would, &ch_would, 16 33)
		CHORD(ch_what, &ch_what, 16 40)
		CHORD(ch_will, &ch_will, 16 23)
		CHORD(ch_one, &ch_one, 16 24)
		CHORD(ch_why, &ch_why, 16 25)
		CHORD(ch_you, &ch_you, 25 24)
	};
};

/ {
	macros {
		CHMAC(ch_about, &kp A &kp B &kp O &kp U &kp T &kp SPC)
		CHMAC(ch_all, &kp A &kp L &kp L &kp SPC)
		CHMAC(ch_am, &kp A &kp M &kp SPC)
		CHMAC(ch_an, &kp A &kp N &kp SPC)
		CHMAC(ch_another, &kp A &kp N &kp O &kp T &kp H &kp E &kp R &kp SPC)
		CHMAC(ch_are, &kp A &kp R &kp E &kp SPC)
		CHMAC(ch_at, &kp A &kp T &kp SPC)
		CHMAC(ch_because, &kp B &kp E &kp C &kp A &kp U &kp S &kp E &kp SPC)
		CHMAC(ch_become, &kp B &kp E &kp C &kp O &kp M &kp E &kp SPC)
		CHMAC(ch_be, &kp B &kp E &kp SPC)
		CHMAC(ch_before, &kp B &kp E &kp F &kp O &kp R &kp E &kp SPC)
		CHMAC(ch_back, &kp B &kp A &kp C &kp K &kp SPC)
		CHMAC(ch_between, &kp B &kp E &kp T &kp W &kp E &kp E &kp N &kp SPC)
		CHMAC(ch_but, &kp B &kp U &kp T &kp SPC)
		CHMAC(ch_could, &kp C &kp O &kp U &kp L &kp D &kp SPC)
		CHMAC(ch_click, &kp C &kp L &kp I &kp C &kp K &kp SPC)
		CHMAC(ch_come, &kp C &kp O &kp M &kp E &kp SPC)
		CHMAC(ch_can, &kp C &kp A &kp N &kp SPC)
		CHMAC(ch_did, &kp D &kp I &kp D &kp SPC)
		CHMAC(ch_do, &kp D &kp O &kp SPC)
		CHMAC(ch_date, &kp D &kp A &kp T &kp E &kp SPC)
		CHMAC(ch_during, &kp D &kp U &kp R &kp I &kp N &kp G &kp SPC)
		CHMAC(ch_down, &kp D &kp O &kp W &kp N &kp SPC)
		CHMAC(ch_day, &kp D &kp A &kp Y &kp SPC)
		CHMAC(ch_each, &kp E &kp A &kp C &kp H &kp SPC)
		CHMAC(ch_even, &kp E &kp V &kp E &kp N &kp SPC)
		CHMAC(ch_found, &kp F &kp O &kp U &kp N &kp D &kp SPC)
		CHMAC(ch_from, &kp F &kp R &kp O &kp M &kp SPC)
		CHMAC(ch_free, &kp F &kp R &kp E &kp E &kp SPC)
		CHMAC(ch_find, &kp F &kp I &kp N &kp D &kp SPC)
		CHMAC(ch_feel, &kp F &kp E &kp E &kp L &kp SPC)
		CHMAC(ch_follow, &kp F &kp O &kp L &kp L &kp O &kp W &kp SPC)
		CHMAC(ch_for, &kp F &kp O &kp R &kp SPC)
		CHMAC(ch_first, &kp F &kp I &kp R &kp S &kp T &kp SPC)
		CHMAC(ch_good, &kp G &kp O &kp O &kp D &kp SPC)
		CHMAC(ch_give, &kp G &kp I &kp V &kp E &kp SPC)
		CHMAC(ch_get, &kp G &kp E &kp T &kp SPC)
		CHMAC(ch_had, &kp H &kp A &kp D &kp SPC)
		CHMAC(ch_he, &kp H &kp E &kp SPC)
		CHMAC(ch_his, &kp H &kp I &kp S &kp SPC)
		CHMAC(ch_help, &kp H &kp E &kp L &kp P &kp SPC)
		CHMAC(ch_here, &kp H &kp E &kp R &kp E &kp SPC)
		CHMAC(ch_how, &kp H &kp O &kp W &kp SPC)
		CHMAC(ch_however, &kp H &kp O &kp W &kp E &kp V &kp E &kp R &kp SPC)
		CHMAC(ch_if, &kp I &kp F &kp SPC)
		CHMAC(ch_in, &kp I &kp N &kp SPC)
		CHMAC(ch_is, &kp I &kp S &kp SPC)
		CHMAC(ch_its, &kp I &kp T &kp S &kp SPC)
		CHMAC(ch_just, &kp J &kp U &kp S &kp T &kp SPC)
		CHMAC(ch_left, &kp L &kp E &kp F &kp T &kp SPC)
		CHMAC(ch_little, &kp L &kp I &kp T &kp T &kp L &kp E &kp SPC)
		CHMAC(ch_like, &kp L &kp I &kp K &kp E &kp SPC)
		CHMAC(ch_also, &kp A &kp L &kp S &kp O &kp SPC)
		CHMAC(ch_only, &kp O &kp N &kp L &kp Y &kp SPC)
		CHMAC(ch_may, &kp M &kp A &kp Y &kp SPC)
		CHMAC(ch_me, &kp M &kp E &kp SPC)
		CHMAC(ch_make, &kp M &kp A &kp K &kp E &kp SPC)
		CHMAC(ch_more, &kp M &kp O &kp R &kp E &kp SPC)
		CHMAC(ch_most, &kp M &kp O &kp S &kp T &kp SPC)
		CHMAC(ch_move, &kp M &kp O &kp V &kp E &kp SPC)
		CHMAC(ch_my, &kp M &kp Y &kp SPC)
		CHMAC(ch_and, &kp A &kp N &kp D &kp SPC)
		CHMAC(ch_need, &kp N &kp E &kp E &kp D &kp SPC)
		CHMAC(ch_no, &kp N &kp O &kp SPC)
		CHMAC(ch_number, &kp N &kp U &kp M &kp B &kp E &kp R &kp SPC)
		CHMAC(ch_now, &kp N &kp O &kp W &kp SPC)
		CHMAC(ch_news, &kp N &kp E &kp W &kp S &kp SPC)
		CHMAC(ch_not, &kp N &kp O &kp T &kp SPC)
		CHMAC(ch_new, &kp N &kp E &kp W &kp SPC)
		CHMAC(ch_any, &kp A &kp N &kp Y &kp SPC)
		CHMAC(ch_of, &kp O &kp F &kp SPC)
		CHMAC(ch_other, &kp O &kp T &kp H &kp E &kp R &kp SPC)
		CHMAC(ch_on, &kp O &kp N &kp SPC)
		CHMAC(ch_or, &kp O &kp R &kp SPC)
		CHMAC(ch_our, &kp O &kp U &kp R &kp SPC)
		CHMAC(ch_over, &kp O &kp V &kp E &kp R &kp SPC)
		CHMAC(ch_part, &kp P &kp A &kp R &kp T &kp SPC)
		CHMAC(ch_person, &kp P &kp E &kp R &kp S &kp O &kp N &kp SPC)
		CHMAC(ch_page, &kp P &kp A &kp G &kp E &kp SPC)
		CHMAC(ch_people, &kp P &kp E &kp O &kp P &kp L &kp E &kp SPC)
		CHMAC(ch_public, &kp P &kp U &kp B &kp L &kp I &kp C &kp SPC)
		CHMAC(ch_ready, &kp R &kp E &kp A &kp D &kp Y &kp SPC)
		CHMAC(ch_right, &kp R &kp I &kp G &kp H &kp T &kp SPC)
		CHMAC(ch_same, &kp S &kp A &kp M &kp E &kp SPC)
		CHMAC(ch_see, &kp S &kp E &kp E &kp SPC)
		CHMAC(ch_seem, &kp S &kp E &kp E &kp M &kp SPC)
		CHMAC(ch_she, &kp S &kp H &kp E &kp SPC)
		CHMAC(ch_search, &kp S &kp E &kp A &kp R &kp C &kp H &kp SPC)
		CHMAC(ch_state, &kp S &kp T &kp A &kp T &kp E &kp SPC)
		CHMAC(ch_sure, &kp S &kp U &kp R &kp E &kp SPC)
		CHMAC(ch_service, &kp S &kp E &kp R &kp V &kp I &kp C &kp E &kp SPC)
		CHMAC(ch_site, &kp S &kp I &kp T &kp E &kp SPC)
		CHMAC(ch_the, &kp T &kp H &kp E &kp SPC)
		CHMAC(ch_there, &kp T &kp H &kp E &kp R &kp E &kp SPC)
		CHMAC(ch_take, &kp T &kp A &kp K &kp E &kp SPC)
		CHMAC(ch_would, &kp W &kp O &kp U &kp L &kp D &kp SPC)
		CHMAC(ch_what, &kp W &kp H &kp A &kp T &kp SPC)
		CHMAC(ch_will, &kp W &kp I &kp L &kp L &kp SPC)
		CHMAC(ch_one, &kp O &kp N &kp E &kp SPC)
		CHMAC(ch_why, &kp W &kp H &kp Y &kp SPC)
		CHMAC(ch_you, &kp Y &kp O &kp U &kp SPC)
	};
};


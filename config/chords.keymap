#define COMBO(name, keypress, keypos) \
combo_##name {                        \
  timeout-ms = <60>;                  \
  bindings = <keypress>;              \
  key-positions = <keypos>;           \
};

#define LAYER_CHORD(name, keypress, keypos, lays) \
chord_##name {                                    \
  timeout-ms = <60>;                              \
  bindings = <keypress>;                          \
  key-positions = <keypos>;                       \
  layers = <lays>;                                \
};

#define CHORD(name, keypress, keypos) \
  LAYER_CHORD(name, keypress, keypos, 0)

#define MACRO(name, keys)             \
name: name##_macro {                  \
  label = #name;                      \
  compatible = "zmk,behavior-macro";  \
  #binding-cells = <0>;               \
  tap-ms = <1>;                       \
  wait-ms = <1>;                      \
  bindings = <keys>;                  \
};

#define CHMAC(name, keys)             \
name: name##_macro {                  \
  label = #name;                      \
  compatible = "zmk,behavior-macro";  \
  #binding-cells = <0>;               \
  tap-ms = <1>;                       \
  wait-ms = <1>;                      \
  bindings = <keys>, <&to 0>;  \
};

/ {
	combos {
		compatible = "zmk,combos";
		CHORD(ch_an, &ch_an, 29 41)
		CHORD(ch_are, &ch_are, 29 30)
		CHORD(ch_at, &ch_at, 29 32)
		CHORD(ch_could, &ch_could, 49 33)
		CHORD(ch_do, &ch_do, 33 44)
		CHORD(ch_feel, &ch_feel, 17 23)
		CHORD(ch_just, &ch_just, 22 24)
		CHORD(ch_and, &ch_and, 41 33)
		CHORD(ch_any, &ch_any, 41 25)
		CHORD(ch_people, &ch_people, 18 23)
		CHORD(ch_right, &ch_right, 30 43 19)
		CHORD(ch_the, &ch_the, 32 40)
		CHORD(ch_there, &ch_there, 32 40 30)
		CHORD(ch_would, &ch_would, 16 33)
		CHORD(ch_what, &ch_what, 16 40)
		CHORD(ch_will, &ch_will, 16 23)
		CHORD(ch_why, &ch_why, 16 25)
		CHORD(ch_you, &ch_you, 25 24)
	};
};

/ {
	macros {
		CHMAC(ch_an, &kp A &kp N &kp SPC)
		CHMAC(ch_are, &kp A &kp R &kp E &kp SPC)
		CHMAC(ch_at, &kp A &kp T &kp SPC)
		CHMAC(ch_could, &kp C &kp O &kp U &kp L &kp D &kp SPC)
		CHMAC(ch_do, &kp D &kp O &kp SPC)
		CHMAC(ch_feel, &kp F &kp E &kp E &kp L &kp SPC)
		CHMAC(ch_just, &kp J &kp U &kp S &kp T &kp SPC)
		CHMAC(ch_and, &kp A &kp N &kp D &kp SPC)
		CHMAC(ch_any, &kp A &kp N &kp Y &kp SPC)
		CHMAC(ch_people, &kp P &kp E &kp O &kp P &kp L &kp E &kp SPC)
		CHMAC(ch_right, &kp R &kp I &kp G &kp H &kp T &kp SPC)
		CHMAC(ch_the, &kp T &kp H &kp E &kp SPC)
		CHMAC(ch_there, &kp T &kp H &kp E &kp R &kp E &kp SPC)
		CHMAC(ch_would, &kp W &kp O &kp U &kp L &kp D &kp SPC)
		CHMAC(ch_what, &kp W &kp H &kp A &kp T &kp SPC)
		CHMAC(ch_will, &kp W &kp I &kp L &kp L &kp SPC)
		CHMAC(ch_why, &kp W &kp H &kp Y &kp SPC)
		CHMAC(ch_you, &kp Y &kp O &kp U &kp SPC)
	};
};


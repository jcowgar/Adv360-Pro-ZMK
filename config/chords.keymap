#define COMBO(name, keypress, keypos) \
combo_##name {                        \
  timeout-ms = <40>;                  \
  bindings = <keypress>;              \
  key-positions = <keypos>;           \
};

#define LAYER_CHORD(name, keypress, keypos, lays) \
chord_##name {                                    \
  timeout-ms = <40>;                              \
  bindings = <keypress>;                          \
  key-positions = <keypos>;                       \
  layers = <lays>;                                \
};

#define CHORD(name, keypress, keypos) \
  LAYER_CHORD(name, keypress, keypos, 0)

#define MACRO(name, keys)             \
name: name##_macro {                  \
  label = #name;                      \
  compatible = "zmk,behavior-macro";  \
  #binding-cells = <0>;               \
  tap-ms = <1>;                       \
  wait-ms = <1>;                      \
  bindings = <keys>;                  \
};

#define CHMAC(name, keys)             \
name: name##_macro {                  \
  label = #name;                      \
  compatible = "zmk,behavior-macro";  \
  #binding-cells = <0>;               \
  tap-ms = <1>;                       \
  wait-ms = <1>;                      \
  bindings = <keys>, <&to 0>;  \
};

/ {
	combos {
		compatible = "zmk,combos";
		CHORD(ch_are, &ch_are, 29 30 42)
		CHORD(ch_as, &ch_as, 29 31)
		CHORD(ch_do, &ch_do, 33 44)
		CHORD(ch_had, &ch_had, 40 29 33)
		CHORD(ch_have, &ch_have, 40 29 50)
		CHORD(ch_that, &ch_that, 32 40 29)
		CHORD(ch_the, &ch_the, 32 40 42)
		CHORD(ch_these, &ch_these, 32 40 42 31)
		CHORD(ch_to, &ch_to, 32 44)
		CHORD(ch_ten, &ch_ten, 1 12)
		CHORD(ch_eleven, &ch_eleven, 1 1)
		CHORD(ch_twelve, &ch_twelve, 1 2)
		CHORD(ch_thirteen, &ch_thirteen, 1 3)
		CHORD(ch_fourteen, &ch_fourteen, 1 4)
		CHORD(ch_fifteen, &ch_fifteen, 1 5)
		CHORD(ch_sixteen, &ch_sixteen, 1 8)
		CHORD(ch_seventeen, &ch_seventeen, 1 9)
		CHORD(ch_eighteen, &ch_eighteen, 1 10)
		CHORD(ch_nineteen, &ch_nineteen, 1 11)
		CHORD(ch_twenty, &ch_twenty, 2 12)
		CHORD(ch_qwerty, &ch_qwerty, 15 16)
	};
};

/ {
	macros {
		CHMAC(ch_are, &kp A &kp R &kp E &kp SPC)
		CHMAC(ch_as, &kp A &kp S &kp SPC)
		CHMAC(ch_do, &kp D &kp O &kp SPC)
		CHMAC(ch_had, &kp H &kp A &kp D &kp SPC)
		CHMAC(ch_have, &kp H &kp A &kp V &kp E &kp SPC)
		CHMAC(ch_that, &kp T &kp H &kp A &kp T &kp SPC)
		CHMAC(ch_the, &kp T &kp H &kp E &kp SPC)
		CHMAC(ch_these, &kp T &kp H &kp E &kp S &kp E &kp SPC)
		CHMAC(ch_to, &kp T &kp O &kp SPC)
		CHMAC(ch_ten, &kp T &kp E &kp N &kp SPC)
		CHMAC(ch_eleven, &kp E &kp L &kp E &kp V &kp E &kp N &kp SPC)
		CHMAC(ch_twelve, &kp T &kp W &kp E &kp L &kp V &kp E &kp SPC)
		CHMAC(ch_thirteen, &kp T &kp H &kp I &kp R &kp T &kp E &kp E &kp N &kp SPC)
		CHMAC(ch_fourteen, &kp F &kp O &kp U &kp R &kp T &kp E &kp E &kp N &kp SPC)
		CHMAC(ch_fifteen, &kp F &kp I &kp F &kp T &kp E &kp E &kp N &kp SPC)
		CHMAC(ch_sixteen, &kp S &kp I &kp X &kp T &kp E &kp E &kp N &kp SPC)
		CHMAC(ch_seventeen, &kp S &kp E &kp V &kp E &kp N &kp T &kp E &kp E &kp N &kp SPC)
		CHMAC(ch_eighteen, &kp E &kp I &kp G &kp H &kp T &kp E &kp E &kp N &kp SPC)
		CHMAC(ch_nineteen, &kp N &kp I &kp N &kp E &kp T &kp E &kp E &kp N &kp SPC)
		CHMAC(ch_twenty, &kp T &kp W &kp E &kp N &kp T &kp Y &kp SPC)
		CHMAC(ch_qwerty, &kp Q &kp W &kp E &kp R &kp T &kp Y &kp SPC)
	};
};

